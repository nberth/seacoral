(**************************************************************************)
(*                                                                        *)
(*  Copyright (c) 2025 OCamlPro                                           *)
(*                                                                        *)
(*  All rights reserved.                                                  *)
(*  This file is distributed under the terms of the GNU General Public    *)
(*  License version 3.                                                    *)
(*                                                                        *)
(**************************************************************************)

(** The harness representation. *)
type t

(** [generate ~dry ~project ~target ~cbmc_driver]

    Generates a harness to pass to CBMC and writes it in [target].
    The input format is as follows:
    simple variables: "varname"
    arrays & pointers: "arr[0], arr[1], ..., arr[size-1]"
    structures & unions: "t.field"
    [cbmc_driver] is the file used as a driver. It depends on the selected
    CBMC mode.

    If [dry] is [true], only initializes the internal representation of the
    harness.
*)
val generate
  : project:_ Sc_project.Types.project
  -> target:[> `C] Sc_sys.File.t
  -> cbmc_driver:[> `H] Sc_sys.File.t
  -> t

val entrypoint: t -> string

(* --- *)

(** Reads a test generated by CBMC and returns its literal binding
    representation. *)
val test_to_literal : t -> Types.DATA.test -> Sc_values.literal_binding

(** Reads a trace generated by a CBMC counter example and returns its literal
    binding representation. *)
val trace_to_literal :
  t -> Types.DATA.instruction list -> Sc_values.literal_binding
