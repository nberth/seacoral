(**************************************************************************)
(*                                                                        *)
(*  Copyright (c) 2025 OCamlPro                                           *)
(*                                                                        *)
(*  All rights reserved.                                                  *)
(*  This file is distributed under the terms of the GNU General Public    *)
(*  License version 3.                                                    *)
(*                                                                        *)
(**************************************************************************)

type 'r corpus

(** [make ~workspace params] creates a test corpus, represented as values of
    type {!raw_test}. *)
val make
  : workspace: Sc_core.Types.workspace
  -> 'raw_test Types.repr
  -> Types.params
  -> 'raw_test corpus Lwt.t

(** [read_test corpus f] reads a test from file [f]; returns [None] if [f]
    does not contain a valid input. *)
val read_test
  : 'raw_test corpus
  -> _ Sc_sys.File.file
  -> 'raw_test option Lwt.t

(** [existing_test_ids ~exclude corpus] is a stream of all identifiers of
    tests previously registered into [corpus].  Members of [exclude], if
    given, are ignored.  *)
val existing_test_ids
  : ?exclude: Basics.Digests.t
  -> _ corpus
  -> Basics.Digests.t Lwt.t

(** [existing_tests ~exclude corpus] is a stream of all tests previously
    registered into [corpus].  Tests whose digest belongs to [exclude], if
    given, are ignored.  *)
val existing_tests
  : ?exclude: Basics.Digests.t
  -> 'raw_test corpus
  -> ('raw_test Types.test_view) Lwt_stream.t

(** [share_test ~on_share ~outcome ~toolname corpus v] promises to share a given
    test with value [v], generated by a tool named [toolname], in [corpus].  If
    provided, [on_share] is called immediately with the identifier computed from
    [v].  *)
val share_test
  : ?on_share: (Digest.t -> unit Lwt.t)
  -> outcome: Types.test_outcome
  -> toolname: string
  -> 'raw_test corpus
  -> 'raw_test
  -> Digest.t Lwt.t

(** Version of {!share_test} that discards the returned digest. *)
val share_test'
  : ?on_share: (Digest.t -> unit Lwt.t)
  -> outcome: Types.test_outcome
  -> toolname: string
  -> 'raw_test corpus
  -> 'raw_test
  -> unit Lwt.t

(** [on_new_test corpus f] promises to call [f] with the identifier and value
    of any {i new} test that is given to [corpus] (e.g, via {!share_test}).
    The promised/returned function must be called at most once to terminate
    the registration of [f]. *)
val on_new_test
  : 'raw_test corpus
  -> ('raw_test Types.test_view -> unit Lwt.t)
  -> (unit -> unit Lwt.t) Lwt.t

(** [stop_receiving_tests corpus] returns a promise that is fulfilled
    whenever every test previously shared in [corpus] has been received and
    registered.

    TODO: specify what happens if {!share_test} is called afterwards.  *)
val stop_receiving_tests: _ corpus -> unit Lwt.t

(** [register_bypassed_test corpus] registers an additional test test whose
    coverage has been accounted for in the status store, but that is not
    inserted into the database. *)
val register_one_bypassed_test: _ corpus -> unit Lwt.t

val test_struct: _ corpus -> Sc_values.Struct.typ

val info: _ corpus -> Types.info
val has_crashes: Types.info -> bool
val has_oracle_failures: Types.info -> bool

(* --- *)

(* cf implementation *)
module Types: sig
  include module type of Types
  type nonrec 'r corpus = 'r corpus
end
