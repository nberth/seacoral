(**************************************************************************)
(*                                                                        *)
(*  Copyright (c) 2025 OCamlPro                                           *)
(*                                                                        *)
(*  All rights reserved.                                                  *)
(*  This file is distributed under the terms of the GNU General Public    *)
(*  License version 3.                                                    *)
(*                                                                        *)
(**************************************************************************)

open Sc_sys.File.TYPES

(** 1. Process command related functions *)

type funs = [ `Auto of string | `All | `Only of string list ]

type options

(** Command line representation for frama-c *)
module Cmd : Sc_sys.Ezcmd.T

(** [lannot_cmd annot_kind proj]
    Returns the command line for starting `lannot` with the coverage
    criterion `annot_kind` and the label file generated.
    You can get the list of all coverage criterions with
    `$ frama-c -lannot-list`.
    It also returns the labelized C file.
 *)
val lannot_cmd :
  (module Types.CONFIG) ->
  ?include_dirs: dir list ->
  cover_criterion: string ->
  annoted_functions: funs ->
  skipped_functions: string list ->
  output_file: string ->
  [> `C] file ->
  Sc_sys.Process.command Lwt.t

(** Returns the command line for initializing the labels file with `luncov` on
    the  project in argument.
    /!\ The files of the project must be the files generated by `lannot`. *)
val luncov_init :
  (module Types.CONFIG) ->
  [> `C] file list -> Sc_sys.Process.command Lwt.t

(** Returns the command line for starting `luncov` on the  project in
    argument.
    /!\ The files of the project must be the files generated by `lannot`. *)
val luncov_cmd :
  (module Types.CONFIG) ->
  ?main_name: string ->
  framac_tools: string list ->
  extra_args: string list ->
  [> `C] file list -> Sc_sys.Process.command Lwt.t

val eacsl_cmd :
  (module Types.CONFIG) ->
  ?main_name: string ->
  output: string ->
  [> `C] file list -> Sc_sys.Process.command Lwt.t

(** Returns an lwt promise stating if frama-c offers the given option; logs
    [stderr] using the given logger. *)
val check_option: errlog:Sc_sys.Process.TYPES.line_logger -> string -> bool Lwt.t

(** Returns an lwt promise stating if luncov is installed *)
val luncov_installed : unit -> bool Lwt.t

(** Returns an lwt promise stating if e-acsl is installed *)
val eacsl_installed : unit -> bool Lwt.t

(* (\** 2. Frama-C primitives *\) *)

(* (\** Prints on the formatter an expression representing a non deterministic value *)
(*     of the given type. *\) *)
(* val interval_of_typ : Format.formatter -> Cil.typ -> unit *)

(** frama-C compatible architectures *)
module Arch : sig
  type t =
    | GCC_X86_64
    | GCC_X86_32
    | GCC_X86_16
    | X86_64
    | X86_32
    | X86_16
    | PPC_32
    | MSCV_X86_64

  (** Creates an arch value from a string *)
  val of_string : string -> t

  (** Returns the constant to define for activating __fc_machdep.h
      correct macros depending on the architecture. *)
  val to_fc_string : t -> string

  (** Returns a printable version of an architecture *)
  val to_pretty_string : t -> string
end

(** Removes the "__fc_stuff" added by Frama-C and replaces them by their
    original name. *)
val remove_framac_builtins_from_file : [> `C] file -> unit
